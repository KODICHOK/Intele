from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN
from keyboards import type_keyboard, area_keyboard, yes_no_keyboard

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


class Survey(StatesGroup):
    type = State()
    area = State()
    night = State()
    cloud = State()
    cameras = State()
    budget = State()


@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –≤—ñ–¥–µ–æ—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è.\n–û–±–µ—Ä–∏ —Ç–∏–ø –æ–±'—î–∫—Ç–∞:",
                         reply_markup=type_keyboard)
    await state.set_state(Survey.type)


@dp.message(Survey.type)
async def get_type(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer("–Ø–∫–∞ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –ø–ª–æ—â–∞ –æ–±'—î–∫—Ç–∞?", reply_markup=area_keyboard)
    await state.set_state(Survey.area)


@dp.message(Survey.area)
async def get_area(message: Message, state: FSMContext):
    await state.update_data(area=message.text)
    await message.answer("–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –Ω—ñ—á–Ω–µ –±–∞—á–µ–Ω–Ω—è?", reply_markup=yes_no_keyboard)
    await state.set_state(Survey.night)


@dp.message(Survey.night)
async def get_night(message: Message, state: FSMContext):
    await state.update_data(night=message.text)
    await message.answer("–ß–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–∞–ø–∏—Å —É —Ö–º–∞—Ä—É?", reply_markup=yes_no_keyboard)
    await state.set_state(Survey.cloud)


@dp.message(Survey.cloud)
async def get_cloud(message: Message, state: FSMContext):
    await state.update_data(cloud=message.text)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –∫–∞–º–µ—Ä –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?")
    await state.set_state(Survey.cameras)


@dp.message(Survey.cameras)
async def get_cameras(message: Message, state: FSMContext):
    await state.update_data(cameras=message.text)
    await message.answer("–Ø–∫–∏–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? (–≤ –≥—Ä–Ω)")
    await state.set_state(Survey.budget)


@dp.message(Survey.budget)
async def get_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    data = await state.get_data()

    recommendation = f"""
üîé *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –¥–ª—è –≤–∞—Å:*

üìç –û–±'—î–∫—Ç: {data['type']}
üìê –ü–ª–æ—â–∞: {data['area']}
üåô –ù—ñ—á–Ω–µ –±–∞—á–µ–Ω–Ω—è: {data['night']}
‚òÅÔ∏è –ó–∞–ø–∏—Å —É —Ö–º–∞—Ä—É: {data['cloud']}
üì∑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–º–µ—Ä: {data['cameras']}
üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']} –≥—Ä–Ω

‚úÖ –í–∞–º –ø—ñ–¥—ñ–π–¥–µ –∫–æ–º–ø–ª–µ–∫—Ç –∑ {data['cameras']} IP-–∫–∞–º–µ—Ä –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—é –∑–¥–∞—Ç–Ω—ñ—Å—Ç—é 1080p, –∑ –Ω—ñ—á–Ω–∏–º –±–∞—á–µ–Ω–Ω—è–º ‚Äî {data['night']}, —Ç–∞ –∑ —Ö–º–∞—Ä–Ω–∏–º –∑–∞–ø–∏—Å–æ–º ‚Äî {data['cloud']}. –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ —Ü—ñ–Ω–∞: {data['budget']} –≥—Ä–Ω.
    """
    await message.answer(recommendation, parse_mode="Markdown")
    await state.clear()


if __name__ == "__main__":
    import asyncio

    asyncio.run(dp.start_polling(bot))
